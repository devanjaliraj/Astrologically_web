{"version":3,"sources":["components/astrology/zegocloud/LiveStreaming.js"],"names":["i","LiveStreaming","options","appId","channel","token","uid","role","channelParameters","localAudioTrack","localVideoTrack","remoteAudioTrack","remoteVideoTrack","remoteUid","agoraEngine","AgoraRTC","createClient","mode","codec","remotePlayerContainer","document","createElement","localPlayerContainer","id","textContent","style","width","height","padding","on","user","mediaType","subscribe","console","log","videoTrack","audioTrack","toString","body","append","play","window","onload","getElementById","onclick","alert","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","close","removeVideoDiv","leave","location","reload","checked","setClientRole","stop","replaceTrack","elementId","Div","remove","startBasicCall","className","type","name","value"],"mappings":"oOACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAEO,IAAMC,EAAgB,WAG3B,IAAIC,EAAU,CAEZC,MAAO,mCAEPC,QAAS,UAETC,MACE,sHAEFC,IAAK,EAELC,KAAM,YAGFC,EAAoB,CAExBC,gBAAiB,KAEjBC,gBAAiB,KAEjBC,iBAAkB,KAElBC,iBAAkB,KAElBC,UAAW,MAEgB,aAkJ5B,OAlJ4B,wBAA7B,wFAEQC,EAAcC,IAASC,aAAa,CAAEC,KAAM,OAAQC,MAAO,QAE3DC,EAAwBC,SAASC,cAAc,QAE/CC,EAAuBF,SAASC,cAAc,QAE/BE,GAAKrB,EAAQI,IAElCgB,EAAqBE,YAAc,cAAgBtB,EAAQI,IAE3DgB,EAAqBG,MAAMC,MAAQ,QACnCJ,EAAqBG,MAAME,OAAS,QACpCL,EAAqBG,MAAMG,QAAU,mBAErCT,EAAsBM,MAAMC,MAAQ,QACpCP,EAAsBM,MAAME,OAAS,QACrCR,EAAsBM,MAAMG,QAAU,mBAEtCd,EAAYe,GAAG,iBAAgB,uCAAE,WAAOC,EAAMC,GAAS,iFAE/CjB,EAAYkB,UAAUF,EAAMC,GAAW,KAAD,EAC5CE,QAAQC,IAAI,qBAEK,SAAbH,IAEFvB,EAAkBI,iBAAmBkB,EAAKK,WAE1C3B,EAAkBG,iBAAmBmB,EAAKM,WAE1C5B,EAAkBK,UAAYiB,EAAKxB,IAAI+B,WAEvClB,EAAsBI,GAAKO,EAAKxB,IAAI+B,WACpC7B,EAAkBK,UAAYiB,EAAKxB,IAAI+B,WACvClB,EAAsBK,YACpB,eAAiBM,EAAKxB,IAAI+B,WAE5BjB,SAASkB,KAAKC,OAAOpB,GACD,QAAhBjB,EAAQK,MAEVC,EAAkBI,iBAAiB4B,KAAKrB,IAI3B,SAAbY,IAEFvB,EAAkBG,iBAAmBmB,EAAKM,WAE1C5B,EAAkBG,iBAAiB6B,QAGrC1B,EAAYe,GAAG,oBAAoB,SAACC,GAClCG,QAAQC,IAAIJ,EAAKxB,IAAM,2BACtB,2CACJ,qDAnC8B,IAoC/BmC,OAAOC,OAAS,WAEdtB,SAASuB,eAAe,QAAQC,QAAO,sBAAG,iFACpB,IAAhB1C,EAAQK,KAAU,gBACsB,OAA1CkC,OAAOI,MAAM,6BAA6B,0CAKtC/B,EAAYgC,KAChB5C,EAAQC,MACRD,EAAQE,QACRF,EAAQG,MACRH,EAAQI,KACR,KAAD,kBAGOS,IAASgC,6BAA6B,KAAD,EADZ,OAAjCvC,EAAkBC,gBAAe,iBAIzBM,IAASiC,yBAAyB,KAAD,GAIzC,GALAxC,EAAkBE,gBAAe,OAGjCU,SAASkB,KAAKC,OAAOjB,GAGD,QAAhBpB,EAAQK,KAAc,kCAElBO,EAAYmC,QAAQ,CACxBzC,EAAkBC,gBAClBD,EAAkBE,kBACjB,KAAD,GAEFF,EAAkBE,gBAAgB8B,KAAKlB,GACvCW,QAAQC,IAAI,oBAAoB,4CAIpCd,SAASuB,eAAe,SAASC,QAAO,sBAAG,8EAOzC,OALApC,EAAkBC,gBAAgByC,QAClC1C,EAAkBE,gBAAgBwC,QAElCC,EAAehC,EAAsBI,IACrC4B,EAAe7B,EAAqBC,IACpC,SACMT,EAAYsC,QAAQ,KAAD,EACzBnB,QAAQC,IAAI,uBAAwBpB,GAEpC2B,OAAOY,SAASC,SAAS,2CAE3BlC,SAASuB,eAAe,QAAQC,QAAO,sBAAG,kFACpCxB,SAASuB,eAAe,QAAQY,QAAQ,CAAD,eAGzC,OADArD,EAAQK,KAAO,OACf,SACMO,EAAY0C,cAActD,EAAQK,MAAM,KAAD,KACJ,MAArCC,EAAkBE,gBAAuB,gCAErCI,EAAYmC,QAAQ,CACxBzC,EAAkBC,gBAClBD,EAAkBE,kBACjB,KAAD,EAEFF,EAAkBI,iBAAiB6C,OAEnCjD,EAAkBE,gBAAgB8B,KAAKlB,GAAsB,2CAInEF,SAASuB,eAAe,YAAYC,QAAO,sBAAG,kFACxCxB,SAASuB,eAAe,YAAYY,QAAQ,CAAD,eAEnB,GAA1BrD,EAAQK,KAAO,WAEwB,MAArCC,EAAkBC,iBACmB,MAArCD,EAAkBE,gBAAuB,mBAEC,MAAtCF,EAAkBI,iBAAwB,gCAEtCJ,EAAkBE,gBAAgBgD,aACtClD,EAAkBI,kBAClB,GACA,KAAD,kBAICE,EAAY0C,cAActD,EAAQK,MAAM,KAAD,uCAGjD,6CACH,sBAGD,SAAS4C,EAAeQ,GACtB1B,QAAQC,IAAI,YAAcyB,EAAY,OACtC,IAAIC,EAAMxC,SAASuB,eAAegB,GAC9BC,GACFA,EAAIC,SAGR,OA7JE,WAC2B,wBAmJ7BC,GAUE,6BACE,wBAAIC,UAAU,oBAGd,yBAAKA,UAAU,OACb,6BACE,2BAAOC,KAAK,QAAQzC,GAAG,OAAO0C,KAAK,SAASC,MAAM,SAClD,uCACA,6BACA,2BAAOF,KAAK,QAAQzC,GAAG,WAAW0C,KAAK,SAASC,MAAM,aACtD,2CACA,6BACA,4BAAQF,KAAK,SAASzC,GAAG,QAAM,QAG/B,4BAAQyC,KAAK,SAASzC,GAAG,SAAO","file":"static/js/149.7f179559.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\r\n\r\nexport const LiveStreaming = () => {\r\n  //  new component by me\r\n\r\n  let options = {\r\n    // Pass your App ID here.\r\n    appId: \"7d1f07c76f9d46be86bc46a791884023\",\r\n    // Set the channel name.\r\n    channel: \"anujesh\",\r\n    // Pass your temp token here.\r\n    token:\r\n      \"0067d1f07c76f9d46be86bc46a791884023IABZ7sN96RKmFTBkTuG/f1zAI3QZSNel+OjfEB1HYpztCElEne4AAAAAEABAuqeD7vxdZAEAAQAOOF1k\",\r\n    // Set the user ID.\r\n    uid: 0,\r\n    // Set the user role\r\n    role: \"Audience\",\r\n  };\r\n\r\n  const channelParameters = {\r\n    // A variable to hold a local audio track.\r\n    localAudioTrack: null,\r\n    // A variable to hold a local video track.\r\n    localVideoTrack: null,\r\n    // A variable to hold a remote audio track.\r\n    remoteAudioTrack: null,\r\n    // A variable to hold a remote video track.\r\n    remoteVideoTrack: null,\r\n    // A variable to hold the remote user id.s\r\n    remoteUid: null,\r\n  };\r\n  async function startBasicCall() {\r\n    // Create an instance of the Agora Engine\r\n    const agoraEngine = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\" });\r\n    // Dynamically create a container in the form of a DIV element to play the remote video track.\r\n    const remotePlayerContainer = document.createElement(\"div\");\r\n    // Dynamically create a container in the form of a DIV element to play the local video track.\r\n    const localPlayerContainer = document.createElement(\"div\");\r\n    // Specify the ID of the DIV container. You can use the uid of the local user.\r\n    localPlayerContainer.id = options.uid;\r\n    // Set the textContent property of the local video container to the local user id.\r\n    localPlayerContainer.textContent = \"Local user \" + options.uid;\r\n    // Set the local video container size.\r\n    localPlayerContainer.style.width = \"640px\";\r\n    localPlayerContainer.style.height = \"480px\";\r\n    localPlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Set the remote video container size.\r\n    remotePlayerContainer.style.width = \"640px\";\r\n    remotePlayerContainer.style.height = \"480px\";\r\n    remotePlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Listen for the \"user-published\" event to retrieve a AgoraRTCRemoteUser object.\r\n    agoraEngine.on(\"user-published\", async (user, mediaType) => {\r\n      // Subscribe to the remote user when the SDK triggers the \"user-published\" event.\r\n      await agoraEngine.subscribe(user, mediaType);\r\n      console.log(\"subscribe success\");\r\n      // Subscribe and play the remote video in the container If the remote user publishes a video track.\r\n      if (mediaType == \"video\") {\r\n        // Retrieve the remote video track.\r\n        channelParameters.remoteVideoTrack = user.videoTrack;\r\n        // Retrieve the remote audio track.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Save the remote user id for reuse.\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        // Specify the ID of the DIV container. You can use the uid of the remote user.\r\n        remotePlayerContainer.id = user.uid.toString();\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        remotePlayerContainer.textContent =\r\n          \"Remote user \" + user.uid.toString();\r\n        // Append the remote container to the page body.\r\n        document.body.append(remotePlayerContainer);\r\n        if (options.role != \"host\") {\r\n          // Play the remote video track.\r\n          channelParameters.remoteVideoTrack.play(remotePlayerContainer);\r\n        }\r\n      }\r\n      // Subscribe and play the remote audio track If the remote user publishes the audio track only.\r\n      if (mediaType == \"audio\") {\r\n        // Get the RemoteAudioTrack object in the AgoraRTCRemoteUser object.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Play the remote audio track. No need to pass any DOM element.\r\n        channelParameters.remoteAudioTrack.play();\r\n      }\r\n      // Listen for the \"user-unpublished\" event.\r\n      agoraEngine.on(\"user-unpublished\", (user) => {\r\n        console.log(user.uid + \"has left the channel\");\r\n      });\r\n    });\r\n    window.onload = function () {\r\n      // Listen to the Join button click event.\r\n      document.getElementById(\"join\").onclick = async function () {\r\n        if (options.role == \"\") {\r\n          window.alert(\"Select a user role first!\");\r\n          return;\r\n        }\r\n\r\n        // Join a channel.\r\n        await agoraEngine.join(\r\n          options.appId,\r\n          options.channel,\r\n          options.token,\r\n          options.uid\r\n        );\r\n        // Create a local audio track from the audio sampled by a microphone.\r\n        channelParameters.localAudioTrack =\r\n          await AgoraRTC.createMicrophoneAudioTrack();\r\n        // Create a local video track from the video captured by a camera.\r\n        channelParameters.localVideoTrack =\r\n          await AgoraRTC.createCameraVideoTrack();\r\n        // Append the local video container to the page body.\r\n        document.body.append(localPlayerContainer);\r\n\r\n        // Publish the local audio and video track if the user joins as a host.\r\n        if (options.role == \"host\") {\r\n          // Publish the local audio and video tracks in the channel.\r\n          await agoraEngine.publish([\r\n            channelParameters.localAudioTrack,\r\n            channelParameters.localVideoTrack,\r\n          ]);\r\n          // Play the local video track.\r\n          channelParameters.localVideoTrack.play(localPlayerContainer);\r\n          console.log(\"publish success!\");\r\n        }\r\n      };\r\n      // Listen to the Leave button click event.\r\n      document.getElementById(\"leave\").onclick = async function () {\r\n        // Destroy the local audio and video tracks.\r\n        channelParameters.localAudioTrack.close();\r\n        channelParameters.localVideoTrack.close();\r\n        // Remove the containers you created for the local video and remote video.\r\n        removeVideoDiv(remotePlayerContainer.id);\r\n        removeVideoDiv(localPlayerContainer.id);\r\n        // Leave the channel\r\n        await agoraEngine.leave();\r\n        console.log(\"You left the channel\", agoraEngine);\r\n        // Refresh the page for reuse\r\n        window.location.reload();\r\n      };\r\n      document.getElementById(\"host\").onclick = async function () {\r\n        if (document.getElementById(\"host\").checked) {\r\n          // Save the selected role in a variable for reuse.\r\n          options.role = \"host\";\r\n          // Call the method to set the role as Host.\r\n          await agoraEngine.setClientRole(options.role);\r\n          if (channelParameters.localVideoTrack != null) {\r\n            // Publish the local audio and video track in the channel.\r\n            await agoraEngine.publish([\r\n              channelParameters.localAudioTrack,\r\n              channelParameters.localVideoTrack,\r\n            ]);\r\n            // Stop playing the remote video.\r\n            channelParameters.remoteVideoTrack.stop();\r\n            // Start playing the local video.\r\n            channelParameters.localVideoTrack.play(localPlayerContainer);\r\n          }\r\n        }\r\n      };\r\n      document.getElementById(\"Audience\").onclick = async function () {\r\n        if (document.getElementById(\"Audience\").checked) {\r\n          // Save the selected role in a variable for reuse.\r\n          options.role = \"audience\";\r\n          if (\r\n            channelParameters.localAudioTrack != null &&\r\n            channelParameters.localVideoTrack != null\r\n          ) {\r\n            if (channelParameters.remoteVideoTrack != null) {\r\n              // Replace the current video track with remote video track\r\n              await channelParameters.localVideoTrack.replaceTrack(\r\n                channelParameters.remoteVideoTrack,\r\n                true\r\n              );\r\n            }\r\n          }\r\n          // Call the method to set the role as Audience.\r\n          await agoraEngine.setClientRole(options.role);\r\n        }\r\n      };\r\n    };\r\n  }\r\n  startBasicCall();\r\n  // Remove the video stream from the container.\r\n  function removeVideoDiv(elementId) {\r\n    console.log(\"Removing \" + elementId + \"Div\");\r\n    let Div = document.getElementById(elementId);\r\n    if (Div) {\r\n      Div.remove();\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 className=\"left-align mt-1\">\r\n        {/* Get started with interactive live streaming */}\r\n      </h2>\r\n      <div className=\"row\">\r\n        <div>\r\n          <input type=\"radio\" id=\"host\" name=\"joinAs\" value=\"host\" />\r\n          <label>Host</label>\r\n          <br />\r\n          <input type=\"radio\" id=\"Audience\" name=\"joinAs\" value=\"audience\" />\r\n          <label>Audience</label>\r\n          <br />\r\n          <button type=\"button\" id=\"join\">\r\n            Join\r\n          </button>\r\n          <button type=\"button\" id=\"leave\">\r\n            Leave\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}