{"version":3,"sources":["components/astrology/zegocloud/LiveVideonew.jsx","components/astrology/zegocloud/LiveStreaming.js"],"names":["LiveVideonew","useState","Videocall","setVideocall","chanel","setchannel","token","settoken","history","useHistory","location","useLocation","rtcProps","appId","channel","uid","role","callbacks","EndCall","push","pathname","sessionStorage","setItem","useEffect","console","log","state","channelName","JSON","parse","localStorage","getItem","headerTop","style","display","width","height","className","i","LiveStreaming","options","channelParameters","localAudioTrack","localVideoTrack","remoteAudioTrack","remoteVideoTrack","remoteUid","agoraEngine","AgoraRTC","createClient","mode","codec","remotePlayerContainer","document","createElement","localPlayerContainer","id","textContent","padding","on","user","mediaType","subscribe","videoTrack","audioTrack","toString","body","append","play","window","onload","getElementById","onclick","alert","join","createMicrophoneAudioTrack","createCameraVideoTrack","publish","close","removeVideoDiv","leave","reload","checked","setClientRole","stop","replaceTrack","elementId","Div","remove","startBasicCall","type","name","value"],"mappings":"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","file":"static/js/132.234c474d.chunk.js","sourcesContent":["import { Container, Row, Col, Button, Input } from \"reactstrap\";\r\nimport LayoutOne from \"../../../layouts/LayoutOne\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport AgoraUIKit from \"agora-react-uikit\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport swal from \"sweetalert\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nimport \"../../../../src/assets/scss/style.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { LiveStreaming } from \"./LiveStreaming.js\";\r\n\r\nfunction LiveVideonew() {\r\n  const [Videocall, setVideocall] = useState(true);\r\n  const [chanel, setchannel] = useState(\"\");\r\n  const [token, settoken] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const location = useLocation();\r\n  // console.log(location.state);\r\n\r\n  const rtcProps = {\r\n    appId: \"7d1f07c76f9d46be86bc46a791884023\",\r\n    // channel: \"Anjali\",\r\n    channel: chanel,\r\n    // Pass your temp token here.\r\n    token: token,\r\n    uid: 0,\r\n    role: \"audience\",\r\n  };\r\n\r\n  const callbacks = {\r\n    EndCall: () => {\r\n      setVideocall(false);\r\n\r\n      history.push({\r\n        pathname: \"/astrorating\",\r\n      });\r\n      sessionStorage.setItem(\"typeofcall\", \"Livestream\");\r\n\r\n      // window.location.replace(\"/\");\r\n\r\n      // console.log(\"object\");\r\n    },\r\n  };\r\n  useEffect(() => {\r\n    console.log(location.state);\r\n    const channel = location?.state?.channelName;\r\n    const token = location?.state?.token;\r\n    settoken(token);\r\n    setchannel(channel);\r\n    console.log(channel);\r\n\r\n    let userId = JSON.parse(localStorage.getItem(\"user_id\"));\r\n    const astroid = localStorage.getItem(\"astroId\");\r\n    // console.log(userId);\r\n    // let livetkn = {\r\n    //   astroAccount: astroid,\r\n    //   userAccount: userId,\r\n    // };\r\n    // axiosConfig\r\n    //   .post(`/user/UerLiveStreamingToken`, livetkn)\r\n    //   .then((res) => {\r\n    //     console.log(res.data);\r\n    //      settoken(res?.data?.token);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <LayoutOne headerTop=\"visible\">\r\n        {/* live streaming by anujesh host*/}\r\n\r\n        {Videocall ? (\r\n          <>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"80vw\",\r\n                height: \"90vh\",\r\n              }}\r\n              className=\"container\"\r\n            >\r\n              <AgoraUIKit rtcProps={rtcProps} callbacks={callbacks} />\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </LayoutOne>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiveVideonew;\r\n","import React, { useEffect } from \"react\";\r\nimport AgoraRTC from \"agora-rtc-sdk-ng\";\r\n\r\nexport const LiveStreaming = () => {\r\n  //  new component by me\r\n\r\n  let options = {\r\n    // Pass your App ID here.\r\n    appId: \"7d1f07c76f9d46be86bc46a791884023\",\r\n    // Set the channel name.\r\n    channel: \"anujesh\",\r\n    // Pass your temp token here.\r\n    token:\r\n      \"0067d1f07c76f9d46be86bc46a791884023IABZ7sN96RKmFTBkTuG/f1zAI3QZSNel+OjfEB1HYpztCElEne4AAAAAEABAuqeD7vxdZAEAAQAOOF1k\",\r\n    // Set the user ID.\r\n    uid: 0,\r\n    // Set the user role\r\n    role: \"Audience\",\r\n  };\r\n\r\n  const channelParameters = {\r\n    // A variable to hold a local audio track.\r\n    localAudioTrack: null,\r\n    // A variable to hold a local video track.\r\n    localVideoTrack: null,\r\n    // A variable to hold a remote audio track.\r\n    remoteAudioTrack: null,\r\n    // A variable to hold a remote video track.\r\n    remoteVideoTrack: null,\r\n    // A variable to hold the remote user id.s\r\n    remoteUid: null,\r\n  };\r\n  async function startBasicCall() {\r\n    // Create an instance of the Agora Engine\r\n    const agoraEngine = AgoraRTC.createClient({ mode: \"live\", codec: \"vp8\" });\r\n    // Dynamically create a container in the form of a DIV element to play the remote video track.\r\n    const remotePlayerContainer = document.createElement(\"div\");\r\n    // Dynamically create a container in the form of a DIV element to play the local video track.\r\n    const localPlayerContainer = document.createElement(\"div\");\r\n    // Specify the ID of the DIV container. You can use the uid of the local user.\r\n    localPlayerContainer.id = options.uid;\r\n    // Set the textContent property of the local video container to the local user id.\r\n    localPlayerContainer.textContent = \"Local user \" + options.uid;\r\n    // Set the local video container size.\r\n    localPlayerContainer.style.width = \"640px\";\r\n    localPlayerContainer.style.height = \"480px\";\r\n    localPlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Set the remote video container size.\r\n    remotePlayerContainer.style.width = \"640px\";\r\n    remotePlayerContainer.style.height = \"480px\";\r\n    remotePlayerContainer.style.padding = \"15px 5px 5px 5px\";\r\n    // Listen for the \"user-published\" event to retrieve a AgoraRTCRemoteUser object.\r\n    agoraEngine.on(\"user-published\", async (user, mediaType) => {\r\n      // Subscribe to the remote user when the SDK triggers the \"user-published\" event.\r\n      await agoraEngine.subscribe(user, mediaType);\r\n      console.log(\"subscribe success\");\r\n      // Subscribe and play the remote video in the container If the remote user publishes a video track.\r\n      if (mediaType == \"video\") {\r\n        // Retrieve the remote video track.\r\n        channelParameters.remoteVideoTrack = user.videoTrack;\r\n        // Retrieve the remote audio track.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Save the remote user id for reuse.\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        // Specify the ID of the DIV container. You can use the uid of the remote user.\r\n        remotePlayerContainer.id = user.uid.toString();\r\n        channelParameters.remoteUid = user.uid.toString();\r\n        remotePlayerContainer.textContent =\r\n          \"Remote user \" + user.uid.toString();\r\n        // Append the remote container to the page body.\r\n        document.body.append(remotePlayerContainer);\r\n        if (options.role != \"host\") {\r\n          // Play the remote video track.\r\n          channelParameters.remoteVideoTrack.play(remotePlayerContainer);\r\n        }\r\n      }\r\n      // Subscribe and play the remote audio track If the remote user publishes the audio track only.\r\n      if (mediaType == \"audio\") {\r\n        // Get the RemoteAudioTrack object in the AgoraRTCRemoteUser object.\r\n        channelParameters.remoteAudioTrack = user.audioTrack;\r\n        // Play the remote audio track. No need to pass any DOM element.\r\n        channelParameters.remoteAudioTrack.play();\r\n      }\r\n      // Listen for the \"user-unpublished\" event.\r\n      agoraEngine.on(\"user-unpublished\", (user) => {\r\n        console.log(user.uid + \"has left the channel\");\r\n      });\r\n    });\r\n    window.onload = function () {\r\n      // Listen to the Join button click event.\r\n      document.getElementById(\"join\").onclick = async function () {\r\n        if (options.role == \"\") {\r\n          window.alert(\"Select a user role first!\");\r\n          return;\r\n        }\r\n\r\n        // Join a channel.\r\n        await agoraEngine.join(\r\n          options.appId,\r\n          options.channel,\r\n          options.token,\r\n          options.uid\r\n        );\r\n        // Create a local audio track from the audio sampled by a microphone.\r\n        channelParameters.localAudioTrack =\r\n          await AgoraRTC.createMicrophoneAudioTrack();\r\n        // Create a local video track from the video captured by a camera.\r\n        channelParameters.localVideoTrack =\r\n          await AgoraRTC.createCameraVideoTrack();\r\n        // Append the local video container to the page body.\r\n        document.body.append(localPlayerContainer);\r\n\r\n        // Publish the local audio and video track if the user joins as a host.\r\n        if (options.role == \"host\") {\r\n          // Publish the local audio and video tracks in the channel.\r\n          await agoraEngine.publish([\r\n            channelParameters.localAudioTrack,\r\n            channelParameters.localVideoTrack,\r\n          ]);\r\n          // Play the local video track.\r\n          channelParameters.localVideoTrack.play(localPlayerContainer);\r\n          console.log(\"publish success!\");\r\n        }\r\n      };\r\n      // Listen to the Leave button click event.\r\n      document.getElementById(\"leave\").onclick = async function () {\r\n        // Destroy the local audio and video tracks.\r\n        channelParameters.localAudioTrack.close();\r\n        channelParameters.localVideoTrack.close();\r\n        // Remove the containers you created for the local video and remote video.\r\n        removeVideoDiv(remotePlayerContainer.id);\r\n        removeVideoDiv(localPlayerContainer.id);\r\n        // Leave the channel\r\n        await agoraEngine.leave();\r\n        console.log(\"You left the channel\", agoraEngine);\r\n        // Refresh the page for reuse\r\n        window.location.reload();\r\n      };\r\n      document.getElementById(\"host\").onclick = async function () {\r\n        if (document.getElementById(\"host\").checked) {\r\n          // Save the selected role in a variable for reuse.\r\n          options.role = \"host\";\r\n          // Call the method to set the role as Host.\r\n          await agoraEngine.setClientRole(options.role);\r\n          if (channelParameters.localVideoTrack != null) {\r\n            // Publish the local audio and video track in the channel.\r\n            await agoraEngine.publish([\r\n              channelParameters.localAudioTrack,\r\n              channelParameters.localVideoTrack,\r\n            ]);\r\n            // Stop playing the remote video.\r\n            channelParameters.remoteVideoTrack.stop();\r\n            // Start playing the local video.\r\n            channelParameters.localVideoTrack.play(localPlayerContainer);\r\n          }\r\n        }\r\n      };\r\n      document.getElementById(\"Audience\").onclick = async function () {\r\n        if (document.getElementById(\"Audience\").checked) {\r\n          // Save the selected role in a variable for reuse.\r\n          options.role = \"audience\";\r\n          if (\r\n            channelParameters.localAudioTrack != null &&\r\n            channelParameters.localVideoTrack != null\r\n          ) {\r\n            if (channelParameters.remoteVideoTrack != null) {\r\n              // Replace the current video track with remote video track\r\n              await channelParameters.localVideoTrack.replaceTrack(\r\n                channelParameters.remoteVideoTrack,\r\n                true\r\n              );\r\n            }\r\n          }\r\n          // Call the method to set the role as Audience.\r\n          await agoraEngine.setClientRole(options.role);\r\n        }\r\n      };\r\n    };\r\n  }\r\n  startBasicCall();\r\n  // Remove the video stream from the container.\r\n  function removeVideoDiv(elementId) {\r\n    console.log(\"Removing \" + elementId + \"Div\");\r\n    let Div = document.getElementById(elementId);\r\n    if (Div) {\r\n      Div.remove();\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <h2 className=\"left-align mt-1\">\r\n        {/* Get started with interactive live streaming */}\r\n      </h2>\r\n      <div className=\"row\">\r\n        <div>\r\n          <input type=\"radio\" id=\"host\" name=\"joinAs\" value=\"host\" />\r\n          <label>Host</label>\r\n          <br />\r\n          <input type=\"radio\" id=\"Audience\" name=\"joinAs\" value=\"audience\" />\r\n          <label>Audience</label>\r\n          <br />\r\n          <button type=\"button\" id=\"join\">\r\n            Join\r\n          </button>\r\n          <button type=\"button\" id=\"leave\">\r\n            Leave\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"sourceRoot":""}