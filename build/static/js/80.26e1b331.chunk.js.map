{"version":3,"sources":["components/astrology/AllMinRecharge.js"],"names":["i","AllMinRecharge","props","componentDidMount","axiosConfig","get","then","response","console","log","data","status","setState","allminrechargeList","swal","catch","error","submitHandler","e","astroid","userId","recharge_planid","preventDefault","id","match","params","obj","astroId","userd","userid","recharge_planId","state","post","modal","toggle","bind","this","headerTop","className","style","backgroundColor","width","padding","backgroundSize","md","minute","length","map","allmin","index","xl","lg","sm","xs","key","onClick","localStorage","setItem","history","push","title","size","maxWidth","isOpen","type","placeholder","React","Component"],"mappings":"iUACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAe4C,IAEtCC,EAAc,kDAClB,WAAYC,GAAQ,IAAD,EAWoB,OAXpB,qBACjB,cAAMA,IAkBRC,kBAAoB,WAClBC,IACGC,IAAI,0BACJC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASG,OACQ,IAAzBH,EAASG,KAAKC,SAChB,EAAKC,SAAS,CAAEC,mBAAoBN,EAASG,KAAKA,OAClDI,IAAK,WAAY,yBAA0B,eAG9CC,OAAM,SAACC,GACNR,QAAQC,IAAIO,GACZR,QAAQC,IAAIO,EAAMT,cAEtB,EACFU,cAAa,uCAAG,WAAOC,EAAGC,EAASC,EAAQC,GAAe,yEAgBvD,OAfDH,EAAEI,iBACIC,EAAO,EAAKrB,MAAMsB,MAAMC,OAAxBF,GAEFG,EAAM,CACRC,QAASJ,EACTJ,QAASA,EACTS,MAAOL,EACPM,OAAQV,EACRW,gBAAiBP,EACjBF,gBAAiBA,EAGjBD,OAAQ,EAAKW,MAAMF,QAGnB,EAAD,OAEKzB,IACH4B,KAAK,sBAAuBN,GAC5BpB,MAAK,SAACC,GACLC,QAAQC,IAAI,SAAUF,EAASG,KAAKC,SACP,IAAzBJ,EAASG,KAAKC,QAChB,EAAKC,SAAS,OAgBjBG,OAAM,SAACC,GACNF,IAAK,SAAU,0BAA2B,SAC1CN,QAAQC,IAAIO,MACX,KAAD,sCACL,yDA3CY,GAhCX,EAAKe,MAAQ,CACXE,OAAO,EACPpB,mBAAoB,GACpBH,KAAM,GACNmB,OAAQ,GACRV,QAAS,GACTW,gBAAiB,IAGnB,EAAKI,OAAS,EAAKA,OAAOC,KAAK,gBAAM,EAoKtC,OAnKA,mCAED,WACEC,KAAKxB,SAAS,CACZqB,OAAQG,KAAKL,MAAME,UAEtB,oBA6DD,WAAU,IAAD,OACCpB,EAAuBuB,KAAKL,MAA5BlB,mBACR,OACE,kBAAC,IAAS,CAACwB,UAAU,WACnB,6BAASC,UAAU,aACjB,yBACEA,UAAU,GACVC,MAAO,CACLC,gBAAiB,UACjBC,MAAO,OACPC,QAAS,WACTC,eAAgB,UAGlB,kBAAC,IAAS,KACR,kBAAC,IAAG,KACF,kBAAC,IAAG,CAACC,GAAG,MACN,yBAAKN,UAAU,sBACb,iDACA,kDACqB,8BAAQF,KAAKL,MAAMc,eASpD,iCACE,kBAAC,IAAS,KACR,kBAAC,IAAG,KAEDhC,EAAmBiC,OAChBjC,EAAmBkC,KAAI,SAACC,EAAQC,GAChC,OACE,kBAAC,IAAG,CAACC,GAAG,IAAIC,GAAG,IAAIP,GAAG,IAAIQ,GAAG,IAAIC,GAAG,IAAIC,IAAKL,GAE3C,4BAAQM,QAAS,WACfC,aAAaC,QAAQ,SAAUT,EAAOH,QACtC,EAAK3C,MAAMwD,QAAQC,KAAK,cAIxB,yBAAKrB,UAAU,oCAUb,+BACE,2BAAIU,EAAOY,QAEb,sCAAYZ,EAAOH,cAO3B,QASV,kBAAC,IAAK,CACJgB,KAAK,KACLtB,MAAO,CAAEuB,SAAU,QAASrB,MAAO,QACnCsB,OAAQ3B,KAAKL,MAAME,MACnBC,OAAQE,KAAKF,OACbI,UAAWF,KAAKlC,MAAMoC,WAEtB,kBAAC,IAAW,CAACA,UAAU,OAAOJ,OAAQE,KAAKF,QACzC,wBAAII,UAAU,QAAM,uBAEtB,kBAAC,IAAS,KACR,yBAAKA,UAAU,aACb,8BACE,kBAAC,IAAG,CAACM,GAAG,MACN,2BAAOoB,KAAK,OAAOC,YAAY,8BAEjC,kBAAC,IAAM,CAAC3B,UAAU,mBAAiB,mBAOhD,EAhLiB,CAAS4B,IAAMC,WAmLpBlE,a","file":"static/js/80.26e1b331.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  InputGroup,\r\n  Form,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport swal from \"sweetalert\";\r\n\r\nimport LayoutOne from \"../../layouts/LayoutOne\";\r\nimport \"../../assets/scss/astroteam.scss\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport axiosConfig from \"../../axiosConfig\";\r\n\r\nclass AllMinRecharge extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false,\r\n      allminrechargeList: [],\r\n      data: {},\r\n      userid: \"\",\r\n      astroid: \"\",\r\n      recharge_planId: \"\"\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  }\r\n  componentDidMount = () => {\r\n    axiosConfig\r\n      .get(\"/user/all_min_recharge\")\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        if (response.data.status === true) {\r\n          this.setState({ allminrechargeList: response.data.data });\r\n          swal(\"Success!\", \"Submitted SuccessFull!\", \"success\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        console.log(error.response);\r\n      });\r\n  };\r\n  submitHandler = async (e, astroid, userId, recharge_planid) => {\r\n    e.preventDefault();\r\n    let { id } = this.props.match.params;\r\n    //  let userid = JSON.parse(localStorage.getItem(\"user_id\"));\r\n    let obj = {\r\n      astroId: id,\r\n      astroid: astroid,\r\n      userd: id,\r\n      userid: astroid,\r\n      recharge_planId: id,\r\n      recharge_planid: recharge_planid,\r\n      // userid: user_id,\r\n      // astroid: this.state.astroid,\r\n      userId: this.state.userid,\r\n      // recharge_planId: this.state._planid,\r\n\r\n    };\r\n\r\n    await axiosConfig\r\n      .post(`/user/addChatWallet`, obj)\r\n      .then((response) => {\r\n        console.log(\"hdfkjh\", response.data.status)\r\n        if (response.data.status === true) {\r\n          this.setState({\r\n\r\n          });\r\n          // axiosConfig.get(`/user/allchatwithuser/${this.state.roomId}`)\r\n          // .then((response1) => {\r\n          //   console.log(response1?.data?.data);\r\n          //   if (response1.data.status === true) {\r\n          //     this.setState({ roomChatData: response1?.data.data });\r\n          //   }\r\n          // })\r\n          // .catch((error) => {\r\n          //   console.log(error);\r\n          // });\r\n        }\r\n      })\r\n\r\n      .catch((error) => {\r\n        swal(\"Error!\", \"You clicked the button!\", \"error\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { allminrechargeList } = this.state;\r\n    return (\r\n      <LayoutOne headerTop=\"visible\">\r\n        <section className=\"pt-0 pb-0\">\r\n          <div\r\n            className=\"\"\r\n            style={{\r\n              backgroundColor: \"#FFD59E\",\r\n              width: \"100%\",\r\n              padding: \"70px 0px\",\r\n              backgroundSize: \"cover\",\r\n            }}\r\n          >\r\n            <Container>\r\n              <Row>\r\n                <Col md=\"12\">\r\n                  <div className=\"leftcont text-left\" >\r\n                    <h1>Select Minute Now</h1>\r\n                    <h3 >\r\n                      Available Minute : <span >{this.state.minute}</span>\r\n                    </h3>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        </section>\r\n\r\n        <section>\r\n          <Container>\r\n            <Row>\r\n\r\n              {allminrechargeList.length\r\n                ? allminrechargeList.map((allmin, index) => {\r\n                  return (\r\n                    <Col xl=\"3\" lg=\"3\" md=\"3\" sm=\"6\" xs=\"6\" key={index}>\r\n                      {/* <Link to=\"/chatApp\"> */}\r\n                      <button onClick={() => {\r\n                        localStorage.setItem(\"minute\", allmin.minute)\r\n                        this.props.history.push('/chatApp')\r\n                      }}>\r\n\r\n\r\n                        <div className=\"promoBox success-box info-ribbon\"\r\n                        // onClick={(e) =>\r\n                        //   this.submitHandler(\r\n                        //     e,\r\n                        //     this.state.astroId,\r\n                        //     this.state.userid,\r\n                        //     this.state.recharge_planId\r\n                        //   )\r\n                        // }\r\n                        >\r\n                          <aside>\r\n                            <p>{allmin.title}</p>\r\n                          </aside>\r\n                          <h4>Minute {allmin.minute}</h4>\r\n                        </div>\r\n                      </button>\r\n                      {/* </Link> */}\r\n                    </Col>\r\n                  );\r\n                })\r\n                : null}\r\n\r\n\r\n            </Row>\r\n          </Container>\r\n        </section>\r\n\r\n        {/* modal for recharge*/}\r\n\r\n        <Modal\r\n          size=\"md\"\r\n          style={{ maxWidth: \"600px\", width: \"100%\" }}\r\n          isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          className={this.props.className}\r\n        >\r\n          <ModalHeader className=\"wr-3\" toggle={this.toggle}>\r\n            <h2 className=\"wr-4\">Apply Voucher Code</h2>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <div className=\"Wr-1 wr-t\">\r\n              <form>\r\n                <Col md=\"12\">\r\n                  <input type=\"text\" placeholder=\"Enter Your Voucher  Code\" />\r\n                </Col>\r\n                <Button className=\"btn btn-success\">Submit</Button>\r\n              </form>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal>\r\n      </LayoutOne>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AllMinRecharge;\r\n"],"sourceRoot":""}